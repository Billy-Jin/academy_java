* 클래스

* 객체

-------------------------------------------------------------
*메소드 : 객체간의 데이터 전달 수단으로 사용

*메소드 선언 문법
[접근제어자] [속성] 리턴유형 메소드명(매개변수리스트){}

-참고
 선언부(메소드 signature라고도 한다) : 리턴유형,메소드명,매개변수리스트
 실행부 : {}블럭안의 코드

*메소드 호출 
문법> 메소드명([매개변수리스트]);


*메소드 종류 
1. 리턴값도 없고, 매개변수도 없는 메소드
문법> void 메소드명(){}
예시> void showMsg(){
			syso("안녕하세요");
     }

2. 리턴값도 없고, 매개변수도 있는 메소드
문법> void 메소드명(매개변수리스트){}
예시> void add(int num1, int num2){
			int result =num1+num2;
			syso( result );
     }

3. 리턴값 있지만, 매개변수도 없는 메소드
문법> 리턴유형 메소드명(){}
예시> int add(){
       int result =1+1;
       return result;
    }

4. 리턴값, 매개변수 있는 메소드
문법> 리턴유형 메소드명(매개변수리스트){}
예시> String upper(String str){   =>오라클의 upper('scott')
	    ....
        return 값;
     } 

-----------------------------
*method overloading - 교재p283참고
 -하나의 클래스에 같은 이름의 메서드를 여러개 정의
 -메서드의 이름이 같아야한다.
 -메서드의 매개변수 타입, 개수, 순서는 달라야 한다.
--------------------------------
*생성자(constructor) - 교재p291참고
 - 모든 클래스에는 반드시 하나 이상의 생성자가 있어야 한다.

*생성자 역할
 - 인스턴스 변수의 초기화. 필드의 초기화(ch06.Korean01 참고)
 - 인스턴스 생성시 수행할 작업에 사용

*문법
 - [접근제어자] 클래스명(매개변수리스트){}
 - 생성자의 이름은 클래스의 이름과 같아야 한다.
 - 생성자는 리턴값이 없다. (하지만 void를 쓰지 않는다.)


*기본생성자 - 교재p292참고
 - [접근제어자] 클래스명(){}
 - 매개변수가 없는 생성자
 - 클래스에 생성자가 하나도 없으면 컴파일러가 기본 생성자를 추가한다.
  (주의.생성자가 하나라도 있으면 컴파일러는 기본 생성자를 추가하지 않는다.)
 
*매개변수가 있는 생성자 - 교재p294참고
 - [접근제어자] 클래스명(매개변수리스트){}
 - 필드의 초기화(ch06.Korean01 참고)

*this() -  교재p295참고

--------------------------
*this -  교재p295참고 











